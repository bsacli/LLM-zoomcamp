{"text": "Pandas can interpret \u201cstring\u201d column values as \u201cdatetime\u201d directly when reading the CSV file using \u201cpd.read_csv\u201d using the parameter \u201cparse_dates\u201d, which for example can contain a list of column names or column indices. Then the conversion afterwards is not required anymore.\npandas.read_csv \u2014 pandas 2.1.4 documentation (pydata.org)\nExample from week 1\nimport pandas as pd\ndf = pd.read_csv(\n'yellow_tripdata_2021-01.csv',\nnrows=100,\nparse_dates=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])\ndf.info()\nwhich will output\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100 entries, 0 to 99\nData columns (total 18 columns):\n#   Column                 Non-Null Count  Dtype\n---  ------                 --------------  -----\n0   VendorID               100 non-null    int64\n1   tpep_pickup_datetime   100 non-null    datetime64[ns]\n2   tpep_dropoff_datetime  100 non-null    datetime64[ns]\n3   passenger_count        100 non-null    int64\n4   trip_distance          100 non-null    float64\n5   RatecodeID             100 non-null    int64\n6   store_and_fwd_flag     100 non-null    object\n7   PULocationID           100 non-null    int64\n8   DOLocationID           100 non-null    int64\n9   payment_type           100 non-null    int64\n10  fare_amount            100 non-null    float64\n11  extra                  100 non-null    float64\n12  mta_tax                100 non-null    float64\n13  tip_amount             100 non-null    float64\n14  tolls_amount           100 non-null    float64\n15  improvement_surcharge  100 non-null    float64\n16  total_amount           100 non-null    float64\n17  congestion_surcharge   100 non-null    float64\ndtypes: datetime64[ns](2), float64(9), int64(6), object(1)\nmemory usage: 14.2+ KB", "section": "Module 1: Docker and Terraform", "question": "iPython - Pandas parsing dates with \u2018read_csv\u2019", "course": "data-engineering-zoomcamp", "document_id": "aa6f52b8"}