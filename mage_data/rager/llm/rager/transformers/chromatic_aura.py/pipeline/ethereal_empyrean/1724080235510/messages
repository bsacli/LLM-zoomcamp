{"result_id": "5e74e141eb204ad6a592796f3ef01594", "data_type": null, "error": {"code": "if 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport re\nfrom typing import Any, Dict, List\n\nimport hashlib\n\ndef generate_document_id(doc):\n    combined = f\"{doc['course']}-{doc['question']}-{doc['text'][:10]}\"\n    hash_object = hashlib.md5(combined.encode())\n    hash_hex = hash_object.hexdigest()\n    document_id = hash_hex[:8]\n    return document_id\n\n@transformer\ndef chunk_documents(data: List[Dict[str, Any]], *args, **kwargs):\n    documents = []\n    for course_dict in data:\n        for doc in course_dict['documents']:\n            doc['course'] = course_dict['course']\n            doc['document_id'] = generate_document_id(doc)\n            documents.append(doc)\n\n    print(len(documents))\n\n    return [documents]\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your transformation logic here\n\n    return data\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "code_context": [], "code_context_formatted": [], "error": "unexpected indent (<unknown>, line 30)", "errors": null, "exception": "IndentationError: unexpected indent (<unknown>, line 30)", "line_number": 50, "message": "unexpected indent (<unknown>, line 30)", "message_formatted": "unexpected indent (<unknown>, line 30)", "stacktrace": ["Traceback (most recent call last):\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 281, in execute_code_async\n    local_variables = await __modify_and_execute(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 69, in __modify_and_execute\n    parsed_code = ast.parse(code_block)\n", "  File \"/usr/local/lib/python3.10/ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n", "  File \"<unknown>\", line 30\n", "    Anything (e.g. data frame, dictionary, array, int, str, etc.)\n", "IndentationError: unexpected indent\n"], "stacktrace_formatted": ["\u001b[91mTraceback (most recent call last):\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 281\u001b[0m, \u001b[35min execute_code_async\n    local_variables = await __modify_and_execute(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 69\u001b[0m, \u001b[35min __modify_and_execute\n    parsed_code = ast.parse(code_block)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/ast.py\"\u001b[0m, \u001b[36mline 50\u001b[0m, \u001b[35min parse\n    return compile(source, filename, mode, flags,\n\u001b[0m", "\u001b[34m  File \"<unknown>\"\u001b[0m, \u001b[36mline 30\n\u001b[0m, \u001b[35m\u001b[0m", "\u001b[90m    Anything (e.g. data frame, dictionary, array, int, str, etc.)\n\u001b[0m", "\u001b[90mIndentationError: unexpected indent\n\u001b[0m", "\u001b[91munexpected indent (<unknown>, line 30)\u001b[0m"], "type": "IndentationError"}, "metadata": null, "output": null, "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "chromatic_aura", "message": "if 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport re\nfrom typing import Any, Dict, List\n\nimport hashlib\n\ndef generate_document_id(doc):\n    combined = f\"{doc['course']}-{doc['question']}-{doc['text'][:10]}\"\n    hash_object = hashlib.md5(combined.encode())\n    hash_hex = hash_object.hexdigest()\n    document_id = hash_hex[:8]\n    return document_id\n\n@transformer\ndef chunk_documents(data: List[Dict[str, Any]], *args, **kwargs):\n    documents = []\n    for course_dict in data:\n        for doc in course_dict['documents']:\n            doc['course'] = course_dict['course']\n            doc['document_id'] = generate_document_id(doc)\n            documents.append(doc)\n\n    print(len(documents))\n\n    return [documents]\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your transformation logic here\n\n    return data\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724080235510", "message_uuid": "ed3122dabd2941f5ba577a346e17ea54", "output_manager": {"namespace": "pipeline/ethereal_empyrean", "path": "llm/rager/transformers/chromatic_aura.py", "uuid": "1724080235510"}, "pid": "ed3122dabd2941f5ba577a346e17ea54", "pid_spawn": null, "source": "chromatic_aura", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "chromatic_aura"}, "status": "error", "type": "status", "uuid": "chromatic_aura", "timestamp": 1724080242669, "output_text": null}
{"result_id": "93ae15fb4fc247978c39ed206dbd1137", "data_type": null, "error": null, "metadata": {"namespace": "pipeline/ethereal_empyrean", "path": "llm/rager/transformers/chromatic_aura.py", "uuid": "1724080235510", "block_type": "transformer", "block_uuid": "chromatic_aura", "execution_partition": null, "pipeline_uuid": "ethereal_empyrean"}, "output": "", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "chromatic_aura", "message": "if 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport re\nfrom typing import Any, Dict, List\n\nimport hashlib\n\ndef generate_document_id(doc):\n    combined = f\"{doc['course']}-{doc['question']}-{doc['text'][:10]}\"\n    hash_object = hashlib.md5(combined.encode())\n    hash_hex = hash_object.hexdigest()\n    document_id = hash_hex[:8]\n    return document_id\n\n@transformer\ndef chunk_documents(data: List[Dict[str, Any]], *args, **kwargs):\n    documents = []\n    for course_dict in data:\n        for doc in course_dict['documents']:\n            doc['course'] = course_dict['course']\n            doc['document_id'] = generate_document_id(doc)\n            documents.append(doc)\n\n    print(len(documents))\n\n    return [documents]\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your transformation logic here\n\n    return data\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724080235510", "message_uuid": "ed3122dabd2941f5ba577a346e17ea54", "output_manager": {"namespace": "pipeline/ethereal_empyrean", "path": "llm/rager/transformers/chromatic_aura.py", "uuid": "1724080235510"}, "pid": "ed3122dabd2941f5ba577a346e17ea54", "pid_spawn": null, "source": "chromatic_aura", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "chromatic_aura"}, "status": "success", "type": "output", "uuid": "chromatic_aura", "timestamp": 1724080243836, "output_text": ""}
