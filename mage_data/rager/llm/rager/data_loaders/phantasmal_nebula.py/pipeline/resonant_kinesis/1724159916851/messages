{"result_id": "4eec79f6261a44efb87e4fb9a67a40bb", "data_type": "text/plain", "error": null, "metadata": null, "output": "llm-zoomcamp\n", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "phantasmal_nebula", "message": "if 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport io\nimport requests\nimport docx\n\ndef clean_line(line):\n    line = line.strip()\n    line = line.strip('\\uFEFF')\n    return line\n\ndef read_faq(file_id):\n    url = f'https://docs.google.com/document/d/{file_id}/export?format=docx'\n    \n    response = requests.get(url)\n    response.raise_for_status()\n    \n    with io.BytesIO(response.content) as f_in:\n        doc = docx.Document(f_in)\n\n    questions = []\n\n    question_heading_style = 'heading 2'\n    section_heading_style = 'heading 1'\n    \n    heading_id = ''\n    section_title = ''\n    question_title = ''\n    answer_text_so_far = ''\n     \n    for p in doc.paragraphs:\n        style = p.style.name.lower()\n        p_text = clean_line(p.text)\n    \n        if len(p_text) == 0:\n            continue\n    \n        if style == section_heading_style:\n            section_title = p_text\n            continue\n    \n        if style == question_heading_style:\n            answer_text_so_far = answer_text_so_far.strip()\n            if answer_text_so_far != '' and section_title != '' and question_title != '':\n                questions.append({\n                    'text': answer_text_so_far,\n                    'section': section_title,\n                    'question': question_title,\n                })\n                answer_text_so_far = ''\n    \n            question_title = p_text\n            continue\n        \n        answer_text_so_far += '\\n' + p_text\n    \n    answer_text_so_far = answer_text_so_far.strip()\n    if answer_text_so_far != '' and section_title != '' and question_title != '':\n        questions.append({\n            'text': answer_text_so_far,\n            'section': section_title,\n            'question': question_title,\n        })\n\n    return questions\n\n@data_loader\ndef load_data(*args, **kwargs):\n    \"\"\"\n    Template code for loading data from any source.\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your data loading logic here\n    faq_documents = {\n    'llm-zoomcamp': '1m2KexowAXTmexfC5rVTCSnaShvdUQ8Ag2IEiwBDHxN0',\n    }\n    documents = []\n\n    for course, file_id in faq_documents.items():\n        print(course)\n        course_documents = read_faq(file_id)\n        documents.append({'course': course, 'documents': course_documents})\n\n    print(f\"Number of FAQ documents processed: {len(documents)}\")\n    return documents\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724159916851", "message_uuid": "e3c0062f82e34dd49418b9c6b1e283cb", "output_manager": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_loaders/phantasmal_nebula.py", "uuid": "1724159916851"}, "pid": "e3c0062f82e34dd49418b9c6b1e283cb", "pid_spawn": null, "source": "phantasmal_nebula", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "phantasmal_nebula"}, "status": "running", "type": "stdout", "uuid": "phantasmal_nebula", "timestamp": 1724159926016, "output_text": "llm-zoomcamp\n"}
{"result_id": "aa8ae4f80a294b1184958a698015b3b8", "data_type": "text/plain", "error": null, "metadata": null, "output": "Number of FAQ documents processed: 1\n", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "phantasmal_nebula", "message": "if 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport io\nimport requests\nimport docx\n\ndef clean_line(line):\n    line = line.strip()\n    line = line.strip('\\uFEFF')\n    return line\n\ndef read_faq(file_id):\n    url = f'https://docs.google.com/document/d/{file_id}/export?format=docx'\n    \n    response = requests.get(url)\n    response.raise_for_status()\n    \n    with io.BytesIO(response.content) as f_in:\n        doc = docx.Document(f_in)\n\n    questions = []\n\n    question_heading_style = 'heading 2'\n    section_heading_style = 'heading 1'\n    \n    heading_id = ''\n    section_title = ''\n    question_title = ''\n    answer_text_so_far = ''\n     \n    for p in doc.paragraphs:\n        style = p.style.name.lower()\n        p_text = clean_line(p.text)\n    \n        if len(p_text) == 0:\n            continue\n    \n        if style == section_heading_style:\n            section_title = p_text\n            continue\n    \n        if style == question_heading_style:\n            answer_text_so_far = answer_text_so_far.strip()\n            if answer_text_so_far != '' and section_title != '' and question_title != '':\n                questions.append({\n                    'text': answer_text_so_far,\n                    'section': section_title,\n                    'question': question_title,\n                })\n                answer_text_so_far = ''\n    \n            question_title = p_text\n            continue\n        \n        answer_text_so_far += '\\n' + p_text\n    \n    answer_text_so_far = answer_text_so_far.strip()\n    if answer_text_so_far != '' and section_title != '' and question_title != '':\n        questions.append({\n            'text': answer_text_so_far,\n            'section': section_title,\n            'question': question_title,\n        })\n\n    return questions\n\n@data_loader\ndef load_data(*args, **kwargs):\n    \"\"\"\n    Template code for loading data from any source.\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your data loading logic here\n    faq_documents = {\n    'llm-zoomcamp': '1m2KexowAXTmexfC5rVTCSnaShvdUQ8Ag2IEiwBDHxN0',\n    }\n    documents = []\n\n    for course, file_id in faq_documents.items():\n        print(course)\n        course_documents = read_faq(file_id)\n        documents.append({'course': course, 'documents': course_documents})\n\n    print(f\"Number of FAQ documents processed: {len(documents)}\")\n    return documents\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724159916851", "message_uuid": "e3c0062f82e34dd49418b9c6b1e283cb", "output_manager": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_loaders/phantasmal_nebula.py", "uuid": "1724159916851"}, "pid": "e3c0062f82e34dd49418b9c6b1e283cb", "pid_spawn": null, "source": "phantasmal_nebula", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "phantasmal_nebula"}, "status": "running", "type": "stdout", "uuid": "phantasmal_nebula", "timestamp": 1724159928018, "output_text": "Number of FAQ documents processed: 1\n"}
{"result_id": "ff9b8f63ff324f119d458664331e3b88", "data_type": null, "error": null, "metadata": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_loaders/phantasmal_nebula.py", "uuid": "1724159916851", "block_type": "data_loader", "block_uuid": "phantasmal_nebula", "execution_partition": null, "pipeline_uuid": "resonant_kinesis"}, "output": "", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "phantasmal_nebula", "message": "if 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport io\nimport requests\nimport docx\n\ndef clean_line(line):\n    line = line.strip()\n    line = line.strip('\\uFEFF')\n    return line\n\ndef read_faq(file_id):\n    url = f'https://docs.google.com/document/d/{file_id}/export?format=docx'\n    \n    response = requests.get(url)\n    response.raise_for_status()\n    \n    with io.BytesIO(response.content) as f_in:\n        doc = docx.Document(f_in)\n\n    questions = []\n\n    question_heading_style = 'heading 2'\n    section_heading_style = 'heading 1'\n    \n    heading_id = ''\n    section_title = ''\n    question_title = ''\n    answer_text_so_far = ''\n     \n    for p in doc.paragraphs:\n        style = p.style.name.lower()\n        p_text = clean_line(p.text)\n    \n        if len(p_text) == 0:\n            continue\n    \n        if style == section_heading_style:\n            section_title = p_text\n            continue\n    \n        if style == question_heading_style:\n            answer_text_so_far = answer_text_so_far.strip()\n            if answer_text_so_far != '' and section_title != '' and question_title != '':\n                questions.append({\n                    'text': answer_text_so_far,\n                    'section': section_title,\n                    'question': question_title,\n                })\n                answer_text_so_far = ''\n    \n            question_title = p_text\n            continue\n        \n        answer_text_so_far += '\\n' + p_text\n    \n    answer_text_so_far = answer_text_so_far.strip()\n    if answer_text_so_far != '' and section_title != '' and question_title != '':\n        questions.append({\n            'text': answer_text_so_far,\n            'section': section_title,\n            'question': question_title,\n        })\n\n    return questions\n\n@data_loader\ndef load_data(*args, **kwargs):\n    \"\"\"\n    Template code for loading data from any source.\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your data loading logic here\n    faq_documents = {\n    'llm-zoomcamp': '1m2KexowAXTmexfC5rVTCSnaShvdUQ8Ag2IEiwBDHxN0',\n    }\n    documents = []\n\n    for course, file_id in faq_documents.items():\n        print(course)\n        course_documents = read_faq(file_id)\n        documents.append({'course': course, 'documents': course_documents})\n\n    print(f\"Number of FAQ documents processed: {len(documents)}\")\n    return documents\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724159916851", "message_uuid": "e3c0062f82e34dd49418b9c6b1e283cb", "output_manager": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_loaders/phantasmal_nebula.py", "uuid": "1724159916851"}, "pid": "e3c0062f82e34dd49418b9c6b1e283cb", "pid_spawn": null, "source": "phantasmal_nebula", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "phantasmal_nebula"}, "status": "success", "type": "output", "uuid": "phantasmal_nebula", "timestamp": 1724159928023, "output_text": ""}
