{"result_id": "a26ce46a1c5c4380ac9a69f81ee4e772", "data_type": null, "error": {"code": "import requests\nfrom urllib.parse import urljoin\n\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef ingest_github_files(*args, **kwargs):\n    \"\"\"\n    Template for loading data from a GitHub repository.\n    Fetch documents from a GitHub repository.\n\n    Args:\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Keyword Args:\n        repo_url (str): URL to the GitHub repository.\n        branch (str): Branch name. Default is 'main'.\n        path (str): Path to the directory or file within the repository.\n        file_extension (str): File extension to filter by (e.g., '.txt').\n\n    Yields:\n        str: Content of each file.\n    \"\"\"\n    repo_url = kwargs.get('repo_url') or ''\n    branch = kwargs.get('branch') or 'main'\n    path = kwargs.get('path') or ''\n    file_extension = kwargs.get('file_extension')\n\n    if not repo_url:\n        raise ValueError(\"The 'repo_url' keyword argument is required.\")\n\n    api_url = urljoin(repo_url, f'/contents/{path}?ref={branch}')\n    response = requests.get(api_url)\n    response.raise_for_status()\n    files = response.json()\n\n    for file in files:\n        if file['type'] == 'file' and (not file_extension or file['name'].endswith(file_extension)):\n            file_response = requests.get(file['download_url'])\n            file_response.raise_for_status()\n            yield file_response.text\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "code_context": [], "code_context_formatted": [], "error": "Expecting value: line 3 column 1 (char 2)", "errors": null, "exception": "JSONDecodeError: Expecting value: line 3 column 1 (char 2)", "line_number": 975, "message": "Expecting value: line 3 column 1 (char 2)", "message_formatted": "Expecting value: line 3 column 1 (char 2)", "stacktrace": ["Traceback (most recent call last):\n", "  File \"/usr/local/lib/python3.10/site-packages/requests/models.py\", line 971, in json\n    return complexjson.loads(self.text, **kwargs)\n", "  File \"/usr/local/lib/python3.10/site-packages/simplejson/__init__.py\", line 514, in loads\n    return _default_decoder.decode(s)\n", "  File \"/usr/local/lib/python3.10/site-packages/simplejson/decoder.py\", line 386, in decode\n    obj, end = self.raw_decode(s)\n", "  File \"/usr/local/lib/python3.10/site-packages/simplejson/decoder.py\", line 416, in raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n", "simplejson.errors.JSONDecodeError: Expecting value: line 3 column 1 (char 2)\n", "\nDuring handling of the above exception, another exception occurred:\n\n", "Traceback (most recent call last):\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 281, in execute_code_async\n    local_variables = await __modify_and_execute(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 135, in __modify_and_execute\n    raise error\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 117, in __modify_and_execute\n    res = await res\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/environments/setup_helpers.py\", line 48, in execute\n    await block.execute(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1711, in execute\n    await loop.run_in_executor(\n", "  File \"/usr/local/lib/python3.10/concurrent/futures/thread.py\", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1688, in execute_sync\n    return __execute()\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1665, in __execute\n    raise err\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1567, in __execute\n    output = self.execute_block(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1912, in execute_block\n    outputs = self._execute_block(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 2075, in _execute_block\n    outputs = self.execute_block_function(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 2210, in execute_block_function\n    for data in output:\n", "  File \"<string>\", line 41, in ingest_github_files\n", "  File \"/usr/local/lib/python3.10/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n", "requests.exceptions.JSONDecodeError: Expecting value: line 3 column 1 (char 2)\n"], "stacktrace_formatted": ["\u001b[91mTraceback (most recent call last):\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/requests/models.py\"\u001b[0m, \u001b[36mline 971\u001b[0m, \u001b[35min json\n    return complexjson.loads(self.text, **kwargs)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/simplejson/__init__.py\"\u001b[0m, \u001b[36mline 514\u001b[0m, \u001b[35min loads\n    return _default_decoder.decode(s)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/simplejson/decoder.py\"\u001b[0m, \u001b[36mline 386\u001b[0m, \u001b[35min decode\n    obj, end = self.raw_decode(s)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/simplejson/decoder.py\"\u001b[0m, \u001b[36mline 416\u001b[0m, \u001b[35min raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n\u001b[0m", "\u001b[90msimplejson.errors.JSONDecodeError: Expecting value: line 3 column 1 (char 2)\n\u001b[0m", "\u001b[90m\nDuring handling of the above exception, another exception occurred:\n\n\u001b[0m", "\u001b[91mTraceback (most recent call last):\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 281\u001b[0m, \u001b[35min execute_code_async\n    local_variables = await __modify_and_execute(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 135\u001b[0m, \u001b[35min __modify_and_execute\n    raise error\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 117\u001b[0m, \u001b[35min __modify_and_execute\n    res = await res\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/environments/setup_helpers.py\"\u001b[0m, \u001b[36mline 48\u001b[0m, \u001b[35min execute\n    await block.execute(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1711\u001b[0m, \u001b[35min execute\n    await loop.run_in_executor(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/concurrent/futures/thread.py\"\u001b[0m, \u001b[36mline 58\u001b[0m, \u001b[35min run\n    result = self.fn(*self.args, **self.kwargs)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1688\u001b[0m, \u001b[35min execute_sync\n    return __execute()\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1665\u001b[0m, \u001b[35min __execute\n    raise err\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1567\u001b[0m, \u001b[35min __execute\n    output = self.execute_block(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1912\u001b[0m, \u001b[35min execute_block\n    outputs = self._execute_block(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 2075\u001b[0m, \u001b[35min _execute_block\n    outputs = self.execute_block_function(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 2210\u001b[0m, \u001b[35min execute_block_function\n    for data in output:\n\u001b[0m", "\u001b[34m  File \"<string>\"\u001b[0m, \u001b[36mline 41\u001b[0m, \u001b[35min ingest_github_files\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/requests/models.py\"\u001b[0m, \u001b[36mline 975\u001b[0m, \u001b[35min json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n\u001b[0m", "\u001b[90mrequests.exceptions.JSONDecodeError: Expecting value: line 3 column 1 (char 2)\n\u001b[0m", "\u001b[91mExpecting value: line 3 column 1 (char 2)\u001b[0m"], "type": "JSONDecodeError"}, "metadata": null, "output": null, "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "meteoric_solaris", "message": "import requests\nfrom urllib.parse import urljoin\n\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef ingest_github_files(*args, **kwargs):\n    \"\"\"\n    Template for loading data from a GitHub repository.\n    Fetch documents from a GitHub repository.\n\n    Args:\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Keyword Args:\n        repo_url (str): URL to the GitHub repository.\n        branch (str): Branch name. Default is 'main'.\n        path (str): Path to the directory or file within the repository.\n        file_extension (str): File extension to filter by (e.g., '.txt').\n\n    Yields:\n        str: Content of each file.\n    \"\"\"\n    repo_url = kwargs.get('repo_url') or ''\n    branch = kwargs.get('branch') or 'main'\n    path = kwargs.get('path') or ''\n    file_extension = kwargs.get('file_extension')\n\n    if not repo_url:\n        raise ValueError(\"The 'repo_url' keyword argument is required.\")\n\n    api_url = urljoin(repo_url, f'/contents/{path}?ref={branch}')\n    response = requests.get(api_url)\n    response.raise_for_status()\n    files = response.json()\n\n    for file in files:\n        if file['type'] == 'file' and (not file_extension or file['name'].endswith(file_extension)):\n            file_response = requests.get(file['download_url'])\n            file_response.raise_for_status()\n            yield file_response.text\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724074530921", "message_uuid": "8e76edc4b2e24a7eb4d85c303d3d514c", "output_manager": {"namespace": "pipeline/mystical_photon", "path": "llm/rager/data_loaders/meteoric_solaris.py", "uuid": "1724074530921"}, "pid": "8e76edc4b2e24a7eb4d85c303d3d514c", "pid_spawn": null, "source": "meteoric_solaris", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "meteoric_solaris"}, "status": "error", "type": "status", "uuid": "meteoric_solaris", "timestamp": 1724074538624, "output_text": null}
{"result_id": "41c9b8fe4f674691a99dd2a489adc5a2", "data_type": null, "error": null, "metadata": {"namespace": "pipeline/mystical_photon", "path": "llm/rager/data_loaders/meteoric_solaris.py", "uuid": "1724074530921", "block_type": "data_loader", "block_uuid": "meteoric_solaris", "execution_partition": null, "pipeline_uuid": "mystical_photon"}, "output": "", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "meteoric_solaris", "message": "import requests\nfrom urllib.parse import urljoin\n\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef ingest_github_files(*args, **kwargs):\n    \"\"\"\n    Template for loading data from a GitHub repository.\n    Fetch documents from a GitHub repository.\n\n    Args:\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Keyword Args:\n        repo_url (str): URL to the GitHub repository.\n        branch (str): Branch name. Default is 'main'.\n        path (str): Path to the directory or file within the repository.\n        file_extension (str): File extension to filter by (e.g., '.txt').\n\n    Yields:\n        str: Content of each file.\n    \"\"\"\n    repo_url = kwargs.get('repo_url') or ''\n    branch = kwargs.get('branch') or 'main'\n    path = kwargs.get('path') or ''\n    file_extension = kwargs.get('file_extension')\n\n    if not repo_url:\n        raise ValueError(\"The 'repo_url' keyword argument is required.\")\n\n    api_url = urljoin(repo_url, f'/contents/{path}?ref={branch}')\n    response = requests.get(api_url)\n    response.raise_for_status()\n    files = response.json()\n\n    for file in files:\n        if file['type'] == 'file' and (not file_extension or file['name'].endswith(file_extension)):\n            file_response = requests.get(file['download_url'])\n            file_response.raise_for_status()\n            yield file_response.text\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724074530921", "message_uuid": "8e76edc4b2e24a7eb4d85c303d3d514c", "output_manager": {"namespace": "pipeline/mystical_photon", "path": "llm/rager/data_loaders/meteoric_solaris.py", "uuid": "1724074530921"}, "pid": "8e76edc4b2e24a7eb4d85c303d3d514c", "pid_spawn": null, "source": "meteoric_solaris", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "meteoric_solaris"}, "status": "success", "type": "output", "uuid": "meteoric_solaris", "timestamp": 1724074538679, "output_text": ""}
