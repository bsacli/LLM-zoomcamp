{"result_id": "dff1ad999c234dde84f5b4e7bbb56dfb", "data_type": null, "error": {"code": "if 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport io\n!pip install docx\nimport requests\nimport docx\n\ndef clean_line(line):\n    line = line.strip()\n    line = line.strip('\\uFEFF')\n    return line\n\ndef read_faq(file_id):\n    url = f'https://docs.google.com/document/d/{file_id}/export?format=docx'\n    \n    response = requests.get(url)\n    response.raise_for_status()\n    \n    with io.BytesIO(response.content) as f_in:\n        doc = docx.Document(f_in)\n\n    questions = []\n\n    question_heading_style = 'heading 2'\n    section_heading_style = 'heading 1'\n    \n    heading_id = ''\n    section_title = ''\n    question_title = ''\n    answer_text_so_far = ''\n     \n    for p in doc.paragraphs:\n        style = p.style.name.lower()\n        p_text = clean_line(p.text)\n    \n        if len(p_text) == 0:\n            continue\n    \n        if style == section_heading_style:\n            section_title = p_text\n            continue\n    \n        if style == question_heading_style:\n            answer_text_so_far = answer_text_so_far.strip()\n            if answer_text_so_far != '' and section_title != '' and question_title != '':\n                questions.append({\n                    'text': answer_text_so_far,\n                    'section': section_title,\n                    'question': question_title,\n                })\n                answer_text_so_far = ''\n    \n            question_title = p_text\n            continue\n        \n        answer_text_so_far += '\\n' + p_text\n    \n    answer_text_so_far = answer_text_so_far.strip()\n    if answer_text_so_far != '' and section_title != '' and question_title != '':\n        questions.append({\n            'text': answer_text_so_far,\n            'section': section_title,\n            'question': question_title,\n        })\n\n    return questions\n\n@data_loader\ndef load_data(*args, **kwargs):\n    \"\"\"\n    Template code for loading data from any source.\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your data loading logic here\n    faq_documents = {\n    'llm-zoomcamp': '1m2KexowAXTmexfC5rVTCSnaShvdUQ8Ag2IEiwBDHxN0',\n    }\n    documents = []\n\n    for course, file_id in faq_documents.items():\n        print(course)\n        course_documents = read_faq(file_id)\n        documents.append({'course': course, 'documents': course_documents})\n    return {}\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "code_context": ["            if answer_text_so_far != '' and section_title != '' and question_title != '':", "                questions.append({", "                    'text': answer_text_so_far,", "                    'section': section_title,", "                    'question': question_title,"], "code_context_formatted": ["\u001b[35m  48:             if answer_text_so_far != '' and section_title != '' and question_title != '':\u001b[0m", "\u001b[35m  49:                 questions.append({\u001b[0m", "\u001b[91m  50:                     'text': answer_text_so_far,\u001b[0m", "\u001b[35m  51:                     'section': section_title,\u001b[0m", "\u001b[35m  52:                     'question': question_title,\u001b[0m"], "error": "invalid syntax (<unknown>, line 7)", "errors": null, "exception": "SyntaxError: invalid syntax (<unknown>, line 7)", "line_number": 50, "message": "invalid syntax (<unknown>, line 7)", "message_formatted": "invalid syntax (<unknown>, line 7)", "stacktrace": ["Traceback (most recent call last):\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 281, in execute_code_async\n    local_variables = await __modify_and_execute(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 69, in __modify_and_execute\n    parsed_code = ast.parse(code_block)\n", "  File \"/usr/local/lib/python3.10/ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n", "  File \"<unknown>\", line 7\n", "    !pip install docx\n", "    ^\n", "SyntaxError: invalid syntax\n"], "stacktrace_formatted": ["\u001b[91mTraceback (most recent call last):\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 281\u001b[0m, \u001b[35min execute_code_async\n    local_variables = await __modify_and_execute(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 69\u001b[0m, \u001b[35min __modify_and_execute\n    parsed_code = ast.parse(code_block)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/ast.py\"\u001b[0m, \u001b[36mline 50\u001b[0m, \u001b[35min parse\n    return compile(source, filename, mode, flags,\n\u001b[0m", "\u001b[34m  File \"<unknown>\"\u001b[0m, \u001b[36mline 7\n\u001b[0m, \u001b[35m\u001b[0m", "\u001b[90m    !pip install docx\n\u001b[0m", "\u001b[90m    ^\n\u001b[0m", "\u001b[90mSyntaxError: invalid syntax\n\u001b[0m", "\u001b[91minvalid syntax (<unknown>, line 7)\u001b[0m"], "type": "SyntaxError"}, "metadata": null, "output": null, "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "unrivaled_wraith", "message": "if 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport io\n!pip install docx\nimport requests\nimport docx\n\ndef clean_line(line):\n    line = line.strip()\n    line = line.strip('\\uFEFF')\n    return line\n\ndef read_faq(file_id):\n    url = f'https://docs.google.com/document/d/{file_id}/export?format=docx'\n    \n    response = requests.get(url)\n    response.raise_for_status()\n    \n    with io.BytesIO(response.content) as f_in:\n        doc = docx.Document(f_in)\n\n    questions = []\n\n    question_heading_style = 'heading 2'\n    section_heading_style = 'heading 1'\n    \n    heading_id = ''\n    section_title = ''\n    question_title = ''\n    answer_text_so_far = ''\n     \n    for p in doc.paragraphs:\n        style = p.style.name.lower()\n        p_text = clean_line(p.text)\n    \n        if len(p_text) == 0:\n            continue\n    \n        if style == section_heading_style:\n            section_title = p_text\n            continue\n    \n        if style == question_heading_style:\n            answer_text_so_far = answer_text_so_far.strip()\n            if answer_text_so_far != '' and section_title != '' and question_title != '':\n                questions.append({\n                    'text': answer_text_so_far,\n                    'section': section_title,\n                    'question': question_title,\n                })\n                answer_text_so_far = ''\n    \n            question_title = p_text\n            continue\n        \n        answer_text_so_far += '\\n' + p_text\n    \n    answer_text_so_far = answer_text_so_far.strip()\n    if answer_text_so_far != '' and section_title != '' and question_title != '':\n        questions.append({\n            'text': answer_text_so_far,\n            'section': section_title,\n            'question': question_title,\n        })\n\n    return questions\n\n@data_loader\ndef load_data(*args, **kwargs):\n    \"\"\"\n    Template code for loading data from any source.\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your data loading logic here\n    faq_documents = {\n    'llm-zoomcamp': '1m2KexowAXTmexfC5rVTCSnaShvdUQ8Ag2IEiwBDHxN0',\n    }\n    documents = []\n\n    for course, file_id in faq_documents.items():\n        print(course)\n        course_documents = read_faq(file_id)\n        documents.append({'course': course, 'documents': course_documents})\n    return {}\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724081197089", "message_uuid": "6e7e692278994037b0feba42230f710a", "output_manager": {"namespace": "pipeline/ethereal_empyrean", "path": "llm/rager/data_loaders/unrivaled_wraith.py", "uuid": "1724081197089"}, "pid": "6e7e692278994037b0feba42230f710a", "pid_spawn": null, "source": "unrivaled_wraith", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "unrivaled_wraith"}, "status": "error", "type": "status", "uuid": "unrivaled_wraith", "timestamp": 1724081197156, "output_text": null}
{"result_id": "ab18b672676c4a9295a779f54e7ecc31", "data_type": null, "error": null, "metadata": {"namespace": "pipeline/ethereal_empyrean", "path": "llm/rager/data_loaders/unrivaled_wraith.py", "uuid": "1724081197089", "block_type": "data_loader", "block_uuid": "unrivaled_wraith", "execution_partition": null, "pipeline_uuid": "ethereal_empyrean"}, "output": "", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "unrivaled_wraith", "message": "if 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nimport io\n!pip install docx\nimport requests\nimport docx\n\ndef clean_line(line):\n    line = line.strip()\n    line = line.strip('\\uFEFF')\n    return line\n\ndef read_faq(file_id):\n    url = f'https://docs.google.com/document/d/{file_id}/export?format=docx'\n    \n    response = requests.get(url)\n    response.raise_for_status()\n    \n    with io.BytesIO(response.content) as f_in:\n        doc = docx.Document(f_in)\n\n    questions = []\n\n    question_heading_style = 'heading 2'\n    section_heading_style = 'heading 1'\n    \n    heading_id = ''\n    section_title = ''\n    question_title = ''\n    answer_text_so_far = ''\n     \n    for p in doc.paragraphs:\n        style = p.style.name.lower()\n        p_text = clean_line(p.text)\n    \n        if len(p_text) == 0:\n            continue\n    \n        if style == section_heading_style:\n            section_title = p_text\n            continue\n    \n        if style == question_heading_style:\n            answer_text_so_far = answer_text_so_far.strip()\n            if answer_text_so_far != '' and section_title != '' and question_title != '':\n                questions.append({\n                    'text': answer_text_so_far,\n                    'section': section_title,\n                    'question': question_title,\n                })\n                answer_text_so_far = ''\n    \n            question_title = p_text\n            continue\n        \n        answer_text_so_far += '\\n' + p_text\n    \n    answer_text_so_far = answer_text_so_far.strip()\n    if answer_text_so_far != '' and section_title != '' and question_title != '':\n        questions.append({\n            'text': answer_text_so_far,\n            'section': section_title,\n            'question': question_title,\n        })\n\n    return questions\n\n@data_loader\ndef load_data(*args, **kwargs):\n    \"\"\"\n    Template code for loading data from any source.\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your data loading logic here\n    faq_documents = {\n    'llm-zoomcamp': '1m2KexowAXTmexfC5rVTCSnaShvdUQ8Ag2IEiwBDHxN0',\n    }\n    documents = []\n\n    for course, file_id in faq_documents.items():\n        print(course)\n        course_documents = read_faq(file_id)\n        documents.append({'course': course, 'documents': course_documents})\n    return {}\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "message_request_uuid": "1724081197089", "message_uuid": "6e7e692278994037b0feba42230f710a", "output_manager": {"namespace": "pipeline/ethereal_empyrean", "path": "llm/rager/data_loaders/unrivaled_wraith.py", "uuid": "1724081197089"}, "pid": "6e7e692278994037b0feba42230f710a", "pid_spawn": null, "source": "unrivaled_wraith", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "unrivaled_wraith"}, "status": "success", "type": "output", "uuid": "unrivaled_wraith", "timestamp": 1724081197211, "output_text": ""}
