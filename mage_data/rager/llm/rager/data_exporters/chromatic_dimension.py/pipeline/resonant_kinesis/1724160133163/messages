{"result_id": "2585b0cfda664823bd80245c87c3f242", "data_type": "text/plain", "error": null, "metadata": null, "output": "Index name: documents_20240820_2213\n", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "chromatic_dimension", "message": "from typing import Dict, List, Union\nimport numpy as np\nfrom elasticsearch import Elasticsearch, exceptions\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef elasticsearch(\n    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,\n):\n    \"\"\"\n    Exports document data to an Elasticsearch database.\n    \"\"\"\n\n    connection_string = kwargs.get('connection_string', 'http://localhost:9200')\n    from datetime import datetime\n\n    index_name_prefix = kwargs.get('index_name', 'documents')\n    current_time = datetime.now().strftime(\"%Y%m%d_%M%S\")\n    index_name = f\"{index_name_prefix}_{current_time}\"\n    print(\"Index name:\", index_name)\n\n    number_of_shards = kwargs.get('number_of_shards', 1)\n    number_of_replicas = kwargs.get('number_of_replicas', 0)\n    vector_column_name = kwargs.get('vector_column_name', 'embedding')\n\n    from mage_ai.data_preparation.variable_manager import set_global_variable\n\n    set_global_variable('resonant_kinesis', 'index_name', index_name)\n\n    dimensions = kwargs.get('dimensions')\n    if dimensions is None and len(documents) > 0:\n        document = documents[0]\n        dimensions = len(document.get(vector_column_name) or [])\n\n    try:\n        es_client = Elasticsearch(connection_string)\n        print(f'Connecting to Elasticsearch at {connection_string}')\n    except exceptions.ConnectionError as e:\n        print(f\"Could not connect to Elasticsearch: {e}\")\n        return\n\n    # Define index settings with custom mappings\n    index_settings = {\n        \"settings\": {\n            \"number_of_shards\": number_of_shards,\n            \"number_of_replicas\": number_of_replicas\n        },\n        \"mappings\": {\n            \"properties\": {\n                \"text\": {\"type\": \"text\"},\n                \"section\": {\"type\": \"text\"},\n                \"question\": {\"type\": \"text\"},\n                \"course\": {\"type\": \"keyword\"},\n                \"document_id\": {\"type\": \"keyword\"},\n                vector_column_name: {\n                    \"type\": \"dense_vector\",\n                    \"dims\": dimensions\n                } if dimensions else {}\n            }\n        }\n    }\n\n    if not es_client.indices.exists(index=index_name):\n        es_client.indices.create(index=index_name, body=index_settings)\n        print(f'Index {index_name} created with settings:', index_settings)\n        print('Embedding dimensions:', dimensions)\n\n    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')\n    for document in documents:\n        print(f'Indexing document {document.get(\"document_id\")}')\n        es_client.index(index=index_name, document=document)\n        print(document)\n", "message_request_uuid": "1724160133163", "message_uuid": "995ba24d164b4f9182794b9b08ad78e9", "output_manager": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_exporters/chromatic_dimension.py", "uuid": "1724160133163"}, "pid": "995ba24d164b4f9182794b9b08ad78e9", "pid_spawn": null, "source": "chromatic_dimension", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "chromatic_dimension"}, "status": "running", "type": "stdout", "uuid": "chromatic_dimension", "timestamp": 1724160133246, "output_text": "Index name: documents_20240820_2213\n"}
{"result_id": "2685246ebff34fa2ad123a09cde12c36", "data_type": null, "error": {"code": "from typing import Dict, List, Union\nimport numpy as np\nfrom elasticsearch import Elasticsearch, exceptions\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef elasticsearch(\n    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,\n):\n    \"\"\"\n    Exports document data to an Elasticsearch database.\n    \"\"\"\n\n    connection_string = kwargs.get('connection_string', 'http://localhost:9200')\n    from datetime import datetime\n\n    index_name_prefix = kwargs.get('index_name', 'documents')\n    current_time = datetime.now().strftime(\"%Y%m%d_%M%S\")\n    index_name = f\"{index_name_prefix}_{current_time}\"\n    print(\"Index name:\", index_name)\n\n    number_of_shards = kwargs.get('number_of_shards', 1)\n    number_of_replicas = kwargs.get('number_of_replicas', 0)\n    vector_column_name = kwargs.get('vector_column_name', 'embedding')\n\n    from mage_ai.data_preparation.variable_manager import set_global_variable\n\n    set_global_variable('resonant_kinesis', 'index_name', index_name)\n\n    dimensions = kwargs.get('dimensions')\n    if dimensions is None and len(documents) > 0:\n        document = documents[0]\n        dimensions = len(document.get(vector_column_name) or [])\n\n    try:\n        es_client = Elasticsearch(connection_string)\n        print(f'Connecting to Elasticsearch at {connection_string}')\n    except exceptions.ConnectionError as e:\n        print(f\"Could not connect to Elasticsearch: {e}\")\n        return\n\n    # Define index settings with custom mappings\n    index_settings = {\n        \"settings\": {\n            \"number_of_shards\": number_of_shards,\n            \"number_of_replicas\": number_of_replicas\n        },\n        \"mappings\": {\n            \"properties\": {\n                \"text\": {\"type\": \"text\"},\n                \"section\": {\"type\": \"text\"},\n                \"question\": {\"type\": \"text\"},\n                \"course\": {\"type\": \"keyword\"},\n                \"document_id\": {\"type\": \"keyword\"},\n                vector_column_name: {\n                    \"type\": \"dense_vector\",\n                    \"dims\": dimensions\n                } if dimensions else {}\n            }\n        }\n    }\n\n    if not es_client.indices.exists(index=index_name):\n        es_client.indices.create(index=index_name, body=index_settings)\n        print(f'Index {index_name} created with settings:', index_settings)\n        print('Embedding dimensions:', dimensions)\n\n    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')\n    for document in documents:\n        print(f'Indexing document {document.get(\"document_id\")}')\n        es_client.index(index=index_name, document=document)\n        print(document)\n", "code_context": [], "code_context_formatted": [], "error": "URL must include a 'scheme', 'host', and 'port' component (ie 'https://localhost:9200')", "errors": null, "exception": "ValueError: URL must include a 'scheme', 'host', and 'port' component (ie 'https://localhost:9200')", "line_number": 213, "message": "URL must include a 'scheme', 'host', and 'port' component (ie 'https://localhost:9200')", "message_formatted": "URL must include a 'scheme', 'host', and 'port' component (ie 'https://localhost:9200')", "stacktrace": ["Traceback (most recent call last):\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 281, in execute_code_async\n    local_variables = await __modify_and_execute(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 135, in __modify_and_execute\n    raise error\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\", line 117, in __modify_and_execute\n    res = await res\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/environments/setup_helpers.py\", line 48, in execute\n    await block.execute(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1711, in execute\n    await loop.run_in_executor(\n", "  File \"/usr/local/lib/python3.10/concurrent/futures/thread.py\", line 58, in run\n    result = self.fn(*self.args, **self.kwargs)\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1688, in execute_sync\n    return __execute()\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1665, in __execute\n    raise err\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1567, in __execute\n    output = self.execute_block(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 1912, in execute_block\n    outputs = self._execute_block(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 2075, in _execute_block\n    outputs = self.execute_block_function(\n", "  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\", line 2186, in execute_block_function\n    output = block_function_updated(*input_vars, **runtime_variables)\n", "  File \"<string>\", line 40, in elasticsearch\n", "  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/__init__.py\", line 331, in __init__\n    node_configs = client_node_configs(\n", "  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/utils.py\", line 105, in client_node_configs\n    node_configs = hosts_to_node_configs(hosts)\n", "  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/utils.py\", line 143, in hosts_to_node_configs\n    return hosts_to_node_configs([hosts])\n", "  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/utils.py\", line 151, in hosts_to_node_configs\n    node_configs.append(url_to_node_config(host))\n", "  File \"/usr/local/lib/python3.10/site-packages/elastic_transport/client_utils.py\", line 213, in url_to_node_config\n    raise ValueError(\n", "ValueError: URL must include a 'scheme', 'host', and 'port' component (ie 'https://localhost:9200')\n"], "stacktrace_formatted": ["\u001b[91mTraceback (most recent call last):\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 281\u001b[0m, \u001b[35min execute_code_async\n    local_variables = await __modify_and_execute(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 135\u001b[0m, \u001b[35min __modify_and_execute\n    raise error\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/execution.py\"\u001b[0m, \u001b[36mline 117\u001b[0m, \u001b[35min __modify_and_execute\n    res = await res\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/kernels/magic/environments/setup_helpers.py\"\u001b[0m, \u001b[36mline 48\u001b[0m, \u001b[35min execute\n    await block.execute(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1711\u001b[0m, \u001b[35min execute\n    await loop.run_in_executor(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/concurrent/futures/thread.py\"\u001b[0m, \u001b[36mline 58\u001b[0m, \u001b[35min run\n    result = self.fn(*self.args, **self.kwargs)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1688\u001b[0m, \u001b[35min execute_sync\n    return __execute()\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1665\u001b[0m, \u001b[35min __execute\n    raise err\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1567\u001b[0m, \u001b[35min __execute\n    output = self.execute_block(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 1912\u001b[0m, \u001b[35min execute_block\n    outputs = self._execute_block(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 2075\u001b[0m, \u001b[35min _execute_block\n    outputs = self.execute_block_function(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/mage_ai/data_preparation/models/block/__init__.py\"\u001b[0m, \u001b[36mline 2186\u001b[0m, \u001b[35min execute_block_function\n    output = block_function_updated(*input_vars, **runtime_variables)\n\u001b[0m", "\u001b[34m  File \"<string>\"\u001b[0m, \u001b[36mline 40\u001b[0m, \u001b[35min elasticsearch\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/__init__.py\"\u001b[0m, \u001b[36mline 331\u001b[0m, \u001b[35min __init__\n    node_configs = client_node_configs(\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/utils.py\"\u001b[0m, \u001b[36mline 105\u001b[0m, \u001b[35min client_node_configs\n    node_configs = hosts_to_node_configs(hosts)\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/utils.py\"\u001b[0m, \u001b[36mline 143\u001b[0m, \u001b[35min hosts_to_node_configs\n    return hosts_to_node_configs([hosts])\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/elasticsearch/_sync/client/utils.py\"\u001b[0m, \u001b[36mline 151\u001b[0m, \u001b[35min hosts_to_node_configs\n    node_configs.append(url_to_node_config(host))\n\u001b[0m", "\u001b[34m  File \"/usr/local/lib/python3.10/site-packages/elastic_transport/client_utils.py\"\u001b[0m, \u001b[36mline 213\u001b[0m, \u001b[35min url_to_node_config\n    raise ValueError(\n\u001b[0m", "\u001b[90mValueError: URL must include a 'scheme', 'host', and 'port' component (ie 'https://localhost:9200')\n\u001b[0m", "\u001b[91mURL must include a 'scheme', 'host', and 'port' component (ie 'https://localhost:9200')\u001b[0m"], "type": "ValueError"}, "metadata": null, "output": null, "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "chromatic_dimension", "message": "from typing import Dict, List, Union\nimport numpy as np\nfrom elasticsearch import Elasticsearch, exceptions\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef elasticsearch(\n    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,\n):\n    \"\"\"\n    Exports document data to an Elasticsearch database.\n    \"\"\"\n\n    connection_string = kwargs.get('connection_string', 'http://localhost:9200')\n    from datetime import datetime\n\n    index_name_prefix = kwargs.get('index_name', 'documents')\n    current_time = datetime.now().strftime(\"%Y%m%d_%M%S\")\n    index_name = f\"{index_name_prefix}_{current_time}\"\n    print(\"Index name:\", index_name)\n\n    number_of_shards = kwargs.get('number_of_shards', 1)\n    number_of_replicas = kwargs.get('number_of_replicas', 0)\n    vector_column_name = kwargs.get('vector_column_name', 'embedding')\n\n    from mage_ai.data_preparation.variable_manager import set_global_variable\n\n    set_global_variable('resonant_kinesis', 'index_name', index_name)\n\n    dimensions = kwargs.get('dimensions')\n    if dimensions is None and len(documents) > 0:\n        document = documents[0]\n        dimensions = len(document.get(vector_column_name) or [])\n\n    try:\n        es_client = Elasticsearch(connection_string)\n        print(f'Connecting to Elasticsearch at {connection_string}')\n    except exceptions.ConnectionError as e:\n        print(f\"Could not connect to Elasticsearch: {e}\")\n        return\n\n    # Define index settings with custom mappings\n    index_settings = {\n        \"settings\": {\n            \"number_of_shards\": number_of_shards,\n            \"number_of_replicas\": number_of_replicas\n        },\n        \"mappings\": {\n            \"properties\": {\n                \"text\": {\"type\": \"text\"},\n                \"section\": {\"type\": \"text\"},\n                \"question\": {\"type\": \"text\"},\n                \"course\": {\"type\": \"keyword\"},\n                \"document_id\": {\"type\": \"keyword\"},\n                vector_column_name: {\n                    \"type\": \"dense_vector\",\n                    \"dims\": dimensions\n                } if dimensions else {}\n            }\n        }\n    }\n\n    if not es_client.indices.exists(index=index_name):\n        es_client.indices.create(index=index_name, body=index_settings)\n        print(f'Index {index_name} created with settings:', index_settings)\n        print('Embedding dimensions:', dimensions)\n\n    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')\n    for document in documents:\n        print(f'Indexing document {document.get(\"document_id\")}')\n        es_client.index(index=index_name, document=document)\n        print(document)\n", "message_request_uuid": "1724160133163", "message_uuid": "995ba24d164b4f9182794b9b08ad78e9", "output_manager": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_exporters/chromatic_dimension.py", "uuid": "1724160133163"}, "pid": "995ba24d164b4f9182794b9b08ad78e9", "pid_spawn": null, "source": "chromatic_dimension", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "chromatic_dimension"}, "status": "error", "type": "status", "uuid": "chromatic_dimension", "timestamp": 1724160133444, "output_text": null}
{"result_id": "12f729656713422da0679888b6ece939", "data_type": null, "error": null, "metadata": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_exporters/chromatic_dimension.py", "uuid": "1724160133163", "block_type": "data_exporter", "block_uuid": "chromatic_dimension", "execution_partition": null, "pipeline_uuid": "resonant_kinesis"}, "output": "", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "chromatic_dimension", "message": "from typing import Dict, List, Union\nimport numpy as np\nfrom elasticsearch import Elasticsearch, exceptions\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef elasticsearch(\n    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,\n):\n    \"\"\"\n    Exports document data to an Elasticsearch database.\n    \"\"\"\n\n    connection_string = kwargs.get('connection_string', 'http://localhost:9200')\n    from datetime import datetime\n\n    index_name_prefix = kwargs.get('index_name', 'documents')\n    current_time = datetime.now().strftime(\"%Y%m%d_%M%S\")\n    index_name = f\"{index_name_prefix}_{current_time}\"\n    print(\"Index name:\", index_name)\n\n    number_of_shards = kwargs.get('number_of_shards', 1)\n    number_of_replicas = kwargs.get('number_of_replicas', 0)\n    vector_column_name = kwargs.get('vector_column_name', 'embedding')\n\n    from mage_ai.data_preparation.variable_manager import set_global_variable\n\n    set_global_variable('resonant_kinesis', 'index_name', index_name)\n\n    dimensions = kwargs.get('dimensions')\n    if dimensions is None and len(documents) > 0:\n        document = documents[0]\n        dimensions = len(document.get(vector_column_name) or [])\n\n    try:\n        es_client = Elasticsearch(connection_string)\n        print(f'Connecting to Elasticsearch at {connection_string}')\n    except exceptions.ConnectionError as e:\n        print(f\"Could not connect to Elasticsearch: {e}\")\n        return\n\n    # Define index settings with custom mappings\n    index_settings = {\n        \"settings\": {\n            \"number_of_shards\": number_of_shards,\n            \"number_of_replicas\": number_of_replicas\n        },\n        \"mappings\": {\n            \"properties\": {\n                \"text\": {\"type\": \"text\"},\n                \"section\": {\"type\": \"text\"},\n                \"question\": {\"type\": \"text\"},\n                \"course\": {\"type\": \"keyword\"},\n                \"document_id\": {\"type\": \"keyword\"},\n                vector_column_name: {\n                    \"type\": \"dense_vector\",\n                    \"dims\": dimensions\n                } if dimensions else {}\n            }\n        }\n    }\n\n    if not es_client.indices.exists(index=index_name):\n        es_client.indices.create(index=index_name, body=index_settings)\n        print(f'Index {index_name} created with settings:', index_settings)\n        print('Embedding dimensions:', dimensions)\n\n    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')\n    for document in documents:\n        print(f'Indexing document {document.get(\"document_id\")}')\n        es_client.index(index=index_name, document=document)\n        print(document)\n", "message_request_uuid": "1724160133163", "message_uuid": "995ba24d164b4f9182794b9b08ad78e9", "output_manager": {"namespace": "pipeline/resonant_kinesis", "path": "llm/rager/data_exporters/chromatic_dimension.py", "uuid": "1724160133163"}, "pid": "995ba24d164b4f9182794b9b08ad78e9", "pid_spawn": null, "source": "chromatic_dimension", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "chromatic_dimension"}, "status": "success", "type": "output", "uuid": "chromatic_dimension", "timestamp": 1724160133464, "output_text": ""}
