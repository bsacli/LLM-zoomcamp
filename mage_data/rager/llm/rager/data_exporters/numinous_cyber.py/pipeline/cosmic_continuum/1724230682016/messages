{"result_id": "5942b57780c4481490a8257d9795a6b7", "data_type": "text/plain", "error": null, "metadata": null, "output": "{'name': 'bc6e7f2deeaa', 'cluster_name': 'docker-cluster', 'cluster_uuid': 'hvB4BdCPRiePC_0zXB4otw', 'version': {'number': '8.5.0', 'build_flavor': 'default', 'build_type': 'docker', 'build_hash': 'c94b4700cda13820dad5aa74fae6db185ca5c304', 'build_date': '2022-10-24T16:54:16.433628434Z', 'build_snapshot': False, 'lucene_version': '9.4.1', 'minimum_wire_compatibility_version': '7.17.0', 'minimum_index_compatibility_version': '7.0.0'}, 'tagline': 'You Know, for Search'}\nindex name: documents_20240821_5802\n", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "numinous_cyber", "message": "from typing import Dict, List, Tuple, Union\n\nimport numpy as np\nfrom elasticsearch import Elasticsearch\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\nimport requests\n\nresponse = requests.get(\"http://elasticsearch:9200\")\nprint(response.json())\n\n@data_exporter\ndef elasticsearch(\n    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,\n):\n    \"\"\"\n    Exports document data to an Elasticsearch database.\n    \"\"\"\n\n    connection_string = kwargs.get('connection_string', 'http://localhost:9200')\n    from datetime import datetime\n\n    index_name_prefix = kwargs.get('index_name', 'documents')\n    current_time = datetime.now().strftime(\"%Y%m%d_%M%S\")\n    index_name = f\"{index_name_prefix}_{current_time}\"\n    print(\"index name:\", index_name)\n    number_of_shards = kwargs.get('number_of_shards', 1)\n    number_of_replicas = kwargs.get('number_of_replicas', 0)\n    vector_column_name = kwargs.get('vector_column_name', 'embedding')\n\n    from mage_ai.data_preparation.variable_manager import set_global_variable\n\n    set_global_variable('cosmic_continuum', 'index_name', index_name) \n\n    dimensions = kwargs.get('dimensions')\n    if dimensions is None and len(documents) > 0:\n        document = documents[0]\n        dimensions = len(document.get(vector_column_name) or [])\n\n    from elasticsearch import Elasticsearch\n\n    es_client = Elasticsearch(\n        connection_string,\n        timeout=60,  # Increase timeout to 60 seconds\n        max_retries=10,\n        retry_on_timeout=True\n    )\n\n\n    print(f'Connecting to Elasticsearch at {connection_string}')\n\n    index_settings = {\n    \"settings\": {\n        \"number_of_shards\": number_of_shards,\n        \"number_of_replicas\": number_of_replicas\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"text\": {\"type\": \"text\"},\n            \"section\": {\"type\": \"text\"},\n            \"question\": {\"type\": \"text\"},\n            \"course\": {\"type\": \"keyword\"},\n            \"document_id\": {\"type\": \"keyword\"}\n        }\n    }\n}\n    if not es_client.indices.exists(index=index_name):\n        es_client.indices.create(index=index_name)\n        print('Index created with properties:', index_settings)\n        print('Embedding dimensions:', dimensions)\n\n    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')\n    for document in documents:\n        print(f'Indexing document {document[\"document_id\"]}')\n\n        es_client.index(index=index_name, document=document)\n\n        print(document)", "message_request_uuid": "1724230682016", "message_uuid": "b93283e9de6142f89beddd01f08eaa25", "output_manager": {"namespace": "pipeline/cosmic_continuum", "path": "llm/rager/data_exporters/numinous_cyber.py", "uuid": "1724230682016"}, "pid": "b93283e9de6142f89beddd01f08eaa25", "pid_spawn": null, "source": "numinous_cyber", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "numinous_cyber"}, "status": "running", "type": "stdout", "uuid": "numinous_cyber", "timestamp": 1724230682264, "output_text": "{'name': 'bc6e7f2deeaa', 'cluster_name': 'docker-cluster', 'cluster_uuid': 'hvB4BdCPRiePC_0zXB4otw', 'version': {'number': '8.5.0', 'build_flavor': 'default', 'build_type': 'docker', 'build_hash': 'c94b4700cda13820dad5aa74fae6db185ca5c304', 'build_date': '2022-10-24T16:54:16.433628434Z', 'build_snapshot': False, 'lucene_version': '9.4.1', 'minimum_wire_compatibility_version': '7.17.0', 'minimum_index_compatibility_version': '7.0.0'}, 'tagline': 'You Know, for Search'}\nindex name: documents_20240821_5802\n"}
{"result_id": "38f85988a10f4a5f813ee989cb1ab4a7", "data_type": "text/plain", "error": null, "metadata": null, "output": "Connecting to Elasticsearch at http://elasticsearch:9200\n", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "numinous_cyber", "message": "from typing import Dict, List, Tuple, Union\n\nimport numpy as np\nfrom elasticsearch import Elasticsearch\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\nimport requests\n\nresponse = requests.get(\"http://elasticsearch:9200\")\nprint(response.json())\n\n@data_exporter\ndef elasticsearch(\n    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,\n):\n    \"\"\"\n    Exports document data to an Elasticsearch database.\n    \"\"\"\n\n    connection_string = kwargs.get('connection_string', 'http://localhost:9200')\n    from datetime import datetime\n\n    index_name_prefix = kwargs.get('index_name', 'documents')\n    current_time = datetime.now().strftime(\"%Y%m%d_%M%S\")\n    index_name = f\"{index_name_prefix}_{current_time}\"\n    print(\"index name:\", index_name)\n    number_of_shards = kwargs.get('number_of_shards', 1)\n    number_of_replicas = kwargs.get('number_of_replicas', 0)\n    vector_column_name = kwargs.get('vector_column_name', 'embedding')\n\n    from mage_ai.data_preparation.variable_manager import set_global_variable\n\n    set_global_variable('cosmic_continuum', 'index_name', index_name) \n\n    dimensions = kwargs.get('dimensions')\n    if dimensions is None and len(documents) > 0:\n        document = documents[0]\n        dimensions = len(document.get(vector_column_name) or [])\n\n    from elasticsearch import Elasticsearch\n\n    es_client = Elasticsearch(\n        connection_string,\n        timeout=60,  # Increase timeout to 60 seconds\n        max_retries=10,\n        retry_on_timeout=True\n    )\n\n\n    print(f'Connecting to Elasticsearch at {connection_string}')\n\n    index_settings = {\n    \"settings\": {\n        \"number_of_shards\": number_of_shards,\n        \"number_of_replicas\": number_of_replicas\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"text\": {\"type\": \"text\"},\n            \"section\": {\"type\": \"text\"},\n            \"question\": {\"type\": \"text\"},\n            \"course\": {\"type\": \"keyword\"},\n            \"document_id\": {\"type\": \"keyword\"}\n        }\n    }\n}\n    if not es_client.indices.exists(index=index_name):\n        es_client.indices.create(index=index_name)\n        print('Index created with properties:', index_settings)\n        print('Embedding dimensions:', dimensions)\n\n    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')\n    for document in documents:\n        print(f'Indexing document {document[\"document_id\"]}')\n\n        es_client.index(index=index_name, document=document)\n\n        print(document)", "message_request_uuid": "1724230682016", "message_uuid": "b93283e9de6142f89beddd01f08eaa25", "output_manager": {"namespace": "pipeline/cosmic_continuum", "path": "llm/rager/data_exporters/numinous_cyber.py", "uuid": "1724230682016"}, "pid": "b93283e9de6142f89beddd01f08eaa25", "pid_spawn": null, "source": "numinous_cyber", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "numinous_cyber"}, "status": "running", "type": "stdout", "uuid": "numinous_cyber", "timestamp": 1724230682342, "output_text": "Connecting to Elasticsearch at http://elasticsearch:9200\n"}
{"result_id": "65141f7e9ac04b249879bd5c8487474f", "data_type": "text/plain", "error": null, "metadata": null, "output": "Index created with properties: {'settings': {'number_of_shards': 1, 'number_of_replicas': 0}, 'mappings': {'properties': {'text': {'type': 'text'}, 'section': {'type': 'text'}, 'question': {'type': 'text'}, 'course': {'type': 'keyword'}, 'document_id': {'type': 'keyword'}}}}\nEmbedding dimensions: 0\nIndexing 86 documents to Elasticsearch index documents_20240821_5802\nIndexing document c68e230a\n", "process": {"data": [], "exitcode": null, "is_alive": false, "internal_state": "INIT", "kernel_uuid": "numinous_cyber", "message": "from typing import Dict, List, Tuple, Union\n\nimport numpy as np\nfrom elasticsearch import Elasticsearch\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\nimport requests\n\nresponse = requests.get(\"http://elasticsearch:9200\")\nprint(response.json())\n\n@data_exporter\ndef elasticsearch(\n    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,\n):\n    \"\"\"\n    Exports document data to an Elasticsearch database.\n    \"\"\"\n\n    connection_string = kwargs.get('connection_string', 'http://localhost:9200')\n    from datetime import datetime\n\n    index_name_prefix = kwargs.get('index_name', 'documents')\n    current_time = datetime.now().strftime(\"%Y%m%d_%M%S\")\n    index_name = f\"{index_name_prefix}_{current_time}\"\n    print(\"index name:\", index_name)\n    number_of_shards = kwargs.get('number_of_shards', 1)\n    number_of_replicas = kwargs.get('number_of_replicas', 0)\n    vector_column_name = kwargs.get('vector_column_name', 'embedding')\n\n    from mage_ai.data_preparation.variable_manager import set_global_variable\n\n    set_global_variable('cosmic_continuum', 'index_name', index_name) \n\n    dimensions = kwargs.get('dimensions')\n    if dimensions is None and len(documents) > 0:\n        document = documents[0]\n        dimensions = len(document.get(vector_column_name) or [])\n\n    from elasticsearch import Elasticsearch\n\n    es_client = Elasticsearch(\n        connection_string,\n        timeout=60,  # Increase timeout to 60 seconds\n        max_retries=10,\n        retry_on_timeout=True\n    )\n\n\n    print(f'Connecting to Elasticsearch at {connection_string}')\n\n    index_settings = {\n    \"settings\": {\n        \"number_of_shards\": number_of_shards,\n        \"number_of_replicas\": number_of_replicas\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"text\": {\"type\": \"text\"},\n            \"section\": {\"type\": \"text\"},\n            \"question\": {\"type\": \"text\"},\n            \"course\": {\"type\": \"keyword\"},\n            \"document_id\": {\"type\": \"keyword\"}\n        }\n    }\n}\n    if not es_client.indices.exists(index=index_name):\n        es_client.indices.create(index=index_name)\n        print('Index created with properties:', index_settings)\n        print('Embedding dimensions:', dimensions)\n\n    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')\n    for document in documents:\n        print(f'Indexing document {document[\"document_id\"]}')\n\n        es_client.index(index=index_name, document=document)\n\n        print(document)", "message_request_uuid": "1724230682016", "message_uuid": "b93283e9de6142f89beddd01f08eaa25", "output_manager": {"namespace": "pipeline/cosmic_continuum", "path": "llm/rager/data_exporters/numinous_cyber.py", "uuid": "1724230682016"}, "pid": "b93283e9de6142f89beddd01f08eaa25", "pid_spawn": null, "source": "numinous_cyber", "stream": "code_executions", "timestamp": null, "timestamp_end": null, "uuid": "numinous_cyber"}, "status": "running", "type": "stdout", "uuid": "numinous_cyber", "timestamp": 1724230712436, "output_text": "Index created with properties: {'settings': {'number_of_shards': 1, 'number_of_replicas': 0}, 'mappings': {'properties': {'text': {'type': 'text'}, 'section': {'type': 'text'}, 'question': {'type': 'text'}, 'course': {'type': 'keyword'}, 'document_id': {'type': 'keyword'}}}}\nEmbedding dimensions: 0\nIndexing 86 documents to Elasticsearch index documents_20240821_5802\nIndexing document c68e230a\n"}
